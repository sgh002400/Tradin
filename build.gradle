buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.sonarqube" version "3.5.0.2730"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

sonarqube {
    properties {
        property "sonar.projectKey", "sgh002400_Traders"
        property "sonar.organization", "traders"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

group = 'com.tradin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.6")
    set('commonsLangVersion', "3.12.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'
    implementation 'com.h2database:h2'

    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.apache.kafka:kafka-streams'

    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    //openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //encode&decode
    implementation 'commons-codec:commons-codec:1.15'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // gson
    implementation 'com.google.code.gson:gson:2.10.1'


    // Swagger
    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

    //StringUtils
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

    //flyway
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.4.1'

    // LocalDateTime
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"

    // Mockito
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.3.1'

    // AssertJ
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'

    // MockWebserver
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.11.0'

    // TestContainer
    testImplementation 'org.testcontainers:testcontainers:1.18.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.18.0'
    testImplementation 'org.testcontainers:kafka:1.18.0'
    testImplementation 'org.testcontainers:postgresql:1.18.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


jar {
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL
def querydslDir = "$buildDir/generated/'querydsl'"

// JPA 사용여부 및 사용 경로 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

// build시 사용할 sourceSet 추가 설정
sourceSets {
    main.java.srcDir querydslDir
}


// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}